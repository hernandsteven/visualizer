{"version":3,"sources":["Node/Node.js","Algorithims/depthFirstSearch.js","Grid/Grid.js","App.js","index.js"],"names":["Node","row","col","isStart","isFinish","isVisited","isWall","onMouseDown","onMouseEnter","onMouseUp","className","id","isValid","grid","m","n","NUM_COLS","initGrid","num_rows","num_cols","currRow","push","createNode","setWall","newGrid","node","Grid","useState","gridState","setGridState","mouseIsPressed","setMousePressed","useEffect","handleDFS","list","stack","length","pop","dfs","i","setTimeout","document","getElementById","handleMouseUp","onClick","handleClearWalls","map","rowIdx","nodeIdx","setWallGrid","handleMouseDown","handleMouseEnter","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e65095e7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = ({\r\n  row,\r\n  col,\r\n  isStart,\r\n  isFinish,\r\n  isVisited,\r\n  isWall,\r\n  onMouseDown,\r\n  onMouseEnter,\r\n  onMouseUp,\r\n}) => {\r\n  const className = isStart\r\n    ? \"start\"\r\n    : isFinish\r\n    ? \"finish\"\r\n    : isWall\r\n    ? \"wall\"\r\n    : isVisited\r\n    ? \"visited\"\r\n    : \"unvisited\";\r\n  return (\r\n    <>\r\n      <div\r\n        className={`node ${className}`}\r\n        id={`${row}-${col}`}\r\n        onMouseDown={() => {\r\n          onMouseDown(row, col);\r\n        }}\r\n        onMouseEnter={() => {\r\n          onMouseEnter(row, col);\r\n        }}\r\n        onMouseUp={() => {\r\n          onMouseUp();\r\n        }}\r\n      ></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","export const dfs = (grid, row, col, m, n, list) => {\r\n  let stack = [[row, col]];\r\n\r\n  while (stack.length > 0) {\r\n    const [row, col] = stack.pop();\r\n    const node = grid[row][col];\r\n    node.isVisited = true;\r\n\r\n    list.push([row, col]);\r\n\r\n    if (node.isFinish) {\r\n      return list;\r\n    }\r\n\r\n    if (isValid(grid, row - 1, col, m, n)) {\r\n      stack.push([row - 1, col]);\r\n    }\r\n    if (isValid(grid, row, col + 1, m, n)) {\r\n      stack.push([row, col + 1]);\r\n    }\r\n    if (isValid(grid, row + 1, col, m, n)) {\r\n      stack.push([row + 1, col]);\r\n    }\r\n    if (isValid(grid, row, col - 1, m, n)) {\r\n      stack.push([row, col - 1]);\r\n    }\r\n  }\r\n  return list;\r\n};\r\n\r\nconst isValid = (grid, row, col, m, n) => {\r\n  if (\r\n    row < 0 ||\r\n    col < 0 ||\r\n    row >= m ||\r\n    col >= n ||\r\n    grid[row][col].isWall ||\r\n    grid[row][col].isVisited\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\nimport Node from \"../Node/Node.js\";\r\nimport { dfs } from \"../Algorithims/depthFirstSearch.js\";\r\nimport { bfs } from \"../Algorithims/breadthFirstSearch.js\";\r\n\r\nconst NUM_ROWS = 10;\r\nconst NUM_COLS = 10;\r\nlet START_ROW = 0;\r\nlet START_COL = 0;\r\nconst DEST_ROW = 0;\r\nconst DEST_COL = NUM_COLS - 1;\r\n\r\nconst Grid = () => {\r\n  const [gridState, setGridState] = useState([]);\r\n  const [mouseIsPressed, setMousePressed] = useState(false);\r\n\r\n  /* Init grid before dom loads */\r\n  useEffect(() => {\r\n    setGridState(initGrid(NUM_ROWS, NUM_COLS));\r\n  }, []);\r\n\r\n  const handleDFS = () => {\r\n    let list = dfs(\r\n      [...gridState],\r\n      START_ROW,\r\n      START_COL,\r\n      NUM_ROWS,\r\n      NUM_COLS,\r\n      []\r\n    );\r\n\r\n    for (let i = 0; i < list.length; i++) {\r\n      setTimeout(() => {\r\n        const [row, col] = list[i];\r\n        document.getElementById(`${row}-${col}`).className = \"node visited\";\r\n      }, 20 * i);\r\n    }\r\n\r\n    //console.log(\"nodes traveled\", list.length);\r\n  };\r\n\r\n  const handleBFS = () => {\r\n    let list = bfs(\r\n      [...gridState],\r\n      START_ROW,\r\n      START_COL,\r\n      NUM_ROWS,\r\n      NUM_COLS,\r\n      []\r\n    );\r\n\r\n    for (let i = 0; i < list.length; i++) {\r\n      setTimeout(() => {\r\n        const [row, col] = list[i];\r\n\r\n        document.getElementById(`${row}-${col}`).className = \"node visited\";\r\n      }, 20 * i);\r\n    }\r\n  };\r\n\r\n  const handleClearWalls = (grid) => {\r\n    let newGrid = [...grid];\r\n    for (let row = 0; row < NUM_ROWS; row++) {\r\n      for (let col = 0; col < NUM_COLS; col++) {\r\n        let node = grid[row][col];\r\n\r\n        if (node.isWall) {\r\n          newGrid[row][col] = { ...node, isWall: !node.isWall };\r\n        }\r\n      }\r\n    }\r\n    setGridState(newGrid);\r\n  };\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    const setWallGrid = setWall(gridState, row, col);\r\n\r\n    if (setWallGrid !== null) {\r\n      setMousePressed(true);\r\n      setTimeout(() => {\r\n        setGridState(setWallGrid);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsPressed) return;\r\n    const setWallGrid = setWall(gridState, row, col);\r\n    if (setWallGrid !== null) {\r\n      setTimeout(() => {\r\n        setGridState(setWallGrid);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setMousePressed(false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setGridState(initGrid(NUM_ROWS, NUM_COLS));\r\n  };\r\n  return (\r\n    <>\r\n      <button\r\n        className=\"button-19\"\r\n        onClick={() => {\r\n          handleDFS(gridState);\r\n        }}\r\n      >\r\n        RUN DFS\r\n      </button>\r\n      <button\r\n        className=\"button-19\"\r\n        onClick={() => {\r\n          handleClearWalls(gridState);\r\n        }}\r\n      >\r\n        CLEAR WALLS\r\n      </button>\r\n      <button\r\n        className=\"button-19\"\r\n        onClick={() => {\r\n          handleReset();\r\n        }}\r\n      >\r\n        Reset\r\n      </button>\r\n      <div className=\"parent\">\r\n        <div className=\"grid\" onMouseUp={() => handleMouseUp()}>\r\n          {gridState.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"row\" key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isStart, isFinish, isWall, isVisited } =\r\n                    node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      isVisited={isVisited}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={() => handleMouseDown(row, col)}\r\n                      onMouseEnter={() => handleMouseEnter(row, col)}\r\n                      onMouseUp={() => handleMouseUp()}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst initGrid = (num_rows, num_cols) => {\r\n  let grid = [];\r\n\r\n  for (let row = 0; row < num_rows; row++) {\r\n    let currRow = [];\r\n    for (let col = 0; col < num_cols; col++) {\r\n      currRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === START_ROW && col === START_COL,\r\n    isFinish: row === DEST_ROW && col === DEST_COL,\r\n    isVisited: false,\r\n    isWall: false,\r\n  };\r\n};\r\n\r\nconst setWall = (grid, row, col) => {\r\n  const newGrid = [...grid];\r\n  const node = newGrid[row][col];\r\n  if (node.isVisited || node.isStart || node.isFinish) return null;\r\n  newGrid[row][col] = { ...node, isWall: !node.isWall };\r\n  return newGrid;\r\n};\r\n\r\nexport default Grid;\r\n","import \"./App.css\";\r\nimport Grid from \"./Grid/Grid.js\";\r\nimport Panel from \"./Panel/Panel\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Grid />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}